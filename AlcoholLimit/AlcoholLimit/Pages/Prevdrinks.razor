@using AlcoholLimit.Data
@inject ConsumedDrinkDatabase ConsumedDrinkDatabase
@inject DrinkDatabase DrinkDatabase
@inject AppState AppState


@page "/prevdrinks"

<UpperMenu/>
<h1>Previous Drinking Page</h1>

<button class="btn btn-primary" @onclick="Refresh">Refresh</button>

@if (cDrinkItemCache == null)
{
	<p><em>Loading...</em></p>
}
else
{
	@foreach (var drinkItemKey in cDrinkItemCache.Keys)
	{
		@if (cDrinkItemCache[drinkItemKey].Count > 0)
		{
			<h2>@drinkItemKey</h2>

			<table class="table @(AppState.profile.nightmode ? "nightmode" : "")">
				<thead>
					<tr>
						<th>Name</th>
						<th>Size (ml)</th>
						<th>Alcohol%</th>
						<th>Pure Alcohol (g)</th>
					</tr>
				</thead>
				<tbody>
					@foreach (var drinkItem in cDrinkItemCache[drinkItemKey])
					{
						<tr>
							@if(drinkItemMap.TryGetValue(drinkItem.ID, out _))
							{
								<td>@drinkItemMap[drinkItem.DrinkItemID].Name</td>
								<td>@drinkItemMap[drinkItem.DrinkItemID].Size</td>
								<td>@drinkItemMap[drinkItem.DrinkItemID].AlcoholPercent</td>
								<td>@drinkItemMap[drinkItem.DrinkItemID].PureAlcGram</td>
							}
						</tr>
					}
				</tbody>
			</table>
		}
	}
}

@code {
	private Dictionary<string, List<ConsumedDrinkItem>> cDrinkItemCache;
	private Dictionary<int, DrinkItem> drinkItemMap = new();

	private bool isAddItemMode = false;

	protected override async Task OnInitializedAsync()
	{
		await RefreshDrinkItemCache();
	}

	private async void Refresh()
	{
		await RefreshDrinkItemCache();
	}

	private async Task RefreshDrinkItemCache()
	{
		cDrinkItemCache = await ConsumedDrinkDatabase.GetItemsByDateAsync();
		HashSet<int> drinkItemIds = new();
		foreach (var cDrinkItemList in cDrinkItemCache.Values) 
		{
			foreach (var cDrinkItem in cDrinkItemList)
			{
				drinkItemIds.Add(cDrinkItem.DrinkItemID);
			}
		}

		drinkItemMap.Clear();
		List<DrinkItem> drinkItems = await DrinkDatabase.GetItemsFromIdSetAsync(drinkItemIds, true);
		foreach (var drinkItem in drinkItems) 
		{
			drinkItemMap.Add(drinkItem.ID, drinkItem);
		}
	}
}