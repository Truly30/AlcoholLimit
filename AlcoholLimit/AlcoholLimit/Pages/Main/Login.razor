@page "/login"
@using AlcoholLimit.Data
@inject NavigationManager UriHelper
@inject ProfileDatabase pd
@inject AppState AppState


@if (stored_profile == null)
{
	<p><em>Loading...</em></p>
}
else
{
	@if (newUser)
	{
		<h3>Register</h3>
		<div class="mb-3">
			<label for="exampleFormControlInput1" class="form-label">Name</label>
			<input required @bind="profile.Name" class="form-control" id="exampleFormControlInput1">
		</div>
		<div class="mb-3">
			<label for="exampleFormControlInput1" class="form-label">Email address</label>
			<input required @bind="profile.Email" class="form-control" id="exampleFormControlInput1" placeholder="e.g. name@example.com">
		</div>
		<div class="mb-3">
			<label for="exampleFormControlInput1" class="form-label">Password</label>
			<input required type="password" @bind="profile.Password" class="form-control" id="exampleFormControlInput1">
		</div>
		<div class="mb-3">
			<label for="exampleFormControlInput1" class="form-label">Weight [kg]</label>
			<input min="20" required @bind="profile.Weight" class="form-control" id="exampleFormControlInput1" placeholder="e.g. 80">
		</div>
		<div class="mb-3">
			<label for="exampleFormControlInput1" class="form-label">Sex</label>
			<select @bind="profile.Sex">
				<option value="MAN">MAN</option>
				<option value="WOMAN">WOMAN</option>
			</select>
		</div>
		<button class="btn btn-primary" @onclick="register">Register</button>
	}
	else
	{
		<h3>Login</h3>

		<div class="mb-3">
			<label for="exampleFormControlInput1" class="form-label">Email address</label>
			<input @bind="profile.Email" class="form-control" id="exampleFormControlInput1" placeholder="name@example.com">
		</div>
		<div class="mb-3">
			<label for="exampleFormControlInput1" class="form-label">Password</label>
			<input type="password" @bind="profile.Password" class="form-control" id="exampleFormControlInput1">
		</div>
		<button class="btn btn-primary" @onclick="login">Login</button>
		<button class="btn btn-primary" @onclick="flush">Delete users</button>
	}

	@if (errors.Length > 0)
	{
		<div class="mb-3">
			<div class="alert alert-danger" role="alert">
				@errors.ToString()
			</div>
		</div>
	}
}

@code {
	public ProfileItem profile;
	public ProfileItem stored_profile;
	public bool newUser = false;
	public String errors = "";

	private List<ProfileItem> profiles = new List<ProfileItem>();

	protected override async Task OnInitializedAsync()
	{
		profiles = await pd.GetItemsAsync();

		profile = new ProfileItem();
		profile.ID = -1;
		if (profiles.Count == 0)
		{
			newUser = true;
			stored_profile = new ProfileItem();
			stored_profile.ID = -1;
		}
		else
			stored_profile = profiles.ElementAt(0);

		StateHasChanged();
	}

	private async void flush()
	{
		await pd.DeleteAllItemAsync();
		profiles = new List<ProfileItem>(); ;
		stored_profile = new ProfileItem();
		newUser = true;
		StateHasChanged();
	}

	private async void register()
	{
		errors = "";
		if (profile.Weight < 20)
		{
			errors = "Your weight is too low";
			return;
		}

		if (profile.Name == null || profile.Email == null || profile.Password == null)
		{
			errors = "Providing an email, a name and password is compulsory";
			return;
		}

		if (IsValidEmail(profile.Email) & profile.Password.Length > 5)
		{
			await pd.SaveItemAsync(profile);
			stored_profile = profile;
			profile = new ProfileItem();
			profile.ID = -1;
			newUser = false;
			StateHasChanged();
		}
		else
			errors = "Not a valid email address, or password shorter than 6 chars!";

	}

	private void login()
	{
		errors = "";
		if (profile.Password == stored_profile.Password & profile.Email == stored_profile.Email)
		{
			AppState.SetProfile(stored_profile);
			UriHelper.NavigateTo("");
		}
		else
			errors = "User not found!";
	}

	private bool IsValidEmail(string email)
	{
		var trimmedEmail = email.Trim();

		if (trimmedEmail.EndsWith("."))
		{
			return false; // suggested by @TK-421
		}
		try
		{
			var addr = new System.Net.Mail.MailAddress(email);
			return addr.Address == trimmedEmail;
		}
		catch
		{
			return false;
		}
	}
}
