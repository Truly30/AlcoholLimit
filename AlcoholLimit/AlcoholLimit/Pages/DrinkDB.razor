@page "/drink"

@using AlcoholLimit.Data
@inject AppState AppState
@inject DrinkDatabase DrinkDatabase
<UpperMenu/>
<h1>Drink Database</h1>

@if (isAddItemMode)
{
	<AlcoholLimit.Components.FDRecordForm 
		OnDrinkItemSubmitted="@AddItem"
		OnCanceled="@ToggleAddItem"
	/>
}
else 
{
	<button class="btn btn-primary" @onclick="ToggleAddItem">Add Item</button>
	<button class="btn btn-primary" @onclick="Refresh">Refresh</button>
	<button class="btn btn-danger" @onclick="DeleteAll">Delete All</button>

	@if (drinkItemCache == null)
	{
		<p><em>Loading...</em></p>
	}
	else
	{
		<table class="table @(AppState.profile.nightmode ? "nightmode" : "")">
			<thead>
				<tr>
					<th @onclick='() => {SortBy("Name");}'>Name</th>
					<th @onclick='() => {SortBy("Size");}'>Size (ml)</th>
					<th @onclick='() => {SortBy("Alc");}'>Alcohol (%)</th>
					<th @onclick='() => {SortBy("Palc");}'>Pure Alcohol (g)</th>
					<th @onclick='() => {SortBy("Cost");}'>Cost (Ft)</th>
					<th @onclick='() => {SortBy("Cal");}'>Calories (kCal)</th>
					<th @onclick='() => {SortBy("ID");}'>  </th>
				</tr>
			</thead>
			<tbody>
				@foreach (var drinkItem in drinkItemCache)
				{
					<tr>
						<td>@drinkItem.Name</td>
						<td>@drinkItem.Size</td>
						<td>@drinkItem.AlcoholPercent</td>
						<td>@drinkItem.PureAlcGram</td>
						<td>@drinkItem.Cost</td>
						<td>@drinkItem.Calories</td>
						<td><button class="btn btn-danger" @onclick="() => {DeleteItem(drinkItem);}">&#10006;</button></td>
					</tr>
				}
			</tbody>
		</table>
	}
}


@code {
	private List<DrinkItem> drinkItemCache;
	private bool isAddItemMode = false;
	private (string, bool) lastSort = ("", default);

	protected override async Task OnInitializedAsync()
	{
		drinkItemCache = await DrinkDatabase.GetItemsAsync();
	}

	private async Task AddItem(DrinkItem item)
	{
		drinkItemCache.Add(item);
		DrinkDatabase.SaveItemAsync(item);
		isAddItemMode = false;
	}

	private async void Refresh()
	{
		await RefreshDrinkItemCache();
	}

	private async void DeleteAll()
	{
		drinkItemCache.Clear();
		foreach (var item in await DrinkDatabase.GetDefaultItemsAsync())
		{
			drinkItemCache.Add(item);
		}
		DrinkDatabase.DeleteAllItemAsync();
	}

	private async void DeleteItem(DrinkItem item)
	{
		drinkItemCache.Remove(item);
		DrinkDatabase.DeleteItemAsync(item);
	}

	private async Task RefreshDrinkItemCache()
	{
		drinkItemCache = await DrinkDatabase.GetItemsAsync();
	}

	private void ToggleAddItem()
	{
		isAddItemMode = !isAddItemMode;
	}

	private void SortBy(string sortByThis)
	{
		switch (sortByThis)
		{
			case "Name":
				drinkItemCache.Sort((x, y) => lastSort.Item1 == sortByThis && lastSort.Item2 ? y.Name.CompareTo(x.Name) : x.Name.CompareTo(y.Name));
				break;
			case "Size":
				drinkItemCache.Sort((x, y) => lastSort.Item1 == sortByThis && lastSort.Item2 ? y.Size.CompareTo(x.Size) : x.Size.CompareTo(y.Size));
				break;
			case "Alc":
				drinkItemCache.Sort((x, y) => lastSort.Item1 == sortByThis && lastSort.Item2 ? y.AlcoholPercent.CompareTo(x.AlcoholPercent) : x.AlcoholPercent.CompareTo(y.AlcoholPercent));
				break;
			case "Palc":
				drinkItemCache.Sort((x, y) => lastSort.Item1 == sortByThis && lastSort.Item2 ? y.PureAlcGram.CompareTo(x.PureAlcGram) : x.PureAlcGram.CompareTo(y.PureAlcGram));
				break;
			case "Cost":
				drinkItemCache.Sort((x, y) => lastSort.Item1 == sortByThis && lastSort.Item2 ? y.Cost.CompareTo(x.Cost) : x.Cost.CompareTo(y.Cost));
				break;
			case "Cal":
				drinkItemCache.Sort((x, y) => lastSort.Item1 == sortByThis && lastSort.Item2 ? y.Calories.CompareTo(x.Calories) : x.Calories.CompareTo(y.Calories));
				break;
			case "ID":
				drinkItemCache.Sort((x, y) => lastSort.Item1 == sortByThis && lastSort.Item2 ? y.ID.CompareTo(x.ID) : x.ID.CompareTo(y.ID));
				break;

		}

		lastSort = lastSort.Item1 == sortByThis ? (sortByThis, !lastSort.Item2) : (sortByThis, true);
	}
}

