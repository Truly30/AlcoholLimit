@using AlcoholLimit.Data

<EditForm Model="@drinkItemRecord">
    <div class="mb-3">
        <label for="name" class="form-label">Drink Item:</label>
        <InputText  @bind-Value="drinkItemRecord.Name" class="form-control" id="name" />

        <label for="size" class="form-label">Volume (ml): </label>
        <InputNumber @bind-Value="drinkItemRecord.Size" class="form-control" id="size" />

        <label for="alcohol-percent" class="form-label">Alcohol %:</label>
        <InputNumber @bind-Value="drinkItemRecord.AlcoholPercent" class="form-control" id="alcohol-percent" />
        
        <label for="cost" class="form-label">Cost:</label>
        <InputNumber @bind-Value="drinkItemRecord.Cost" class="form-control" id="cost" />

        <label for="calories" class="form-label">Calories:</label>
        <InputNumber @bind-Value="drinkItemRecord.Calories" class="form-control" id="calories" />

        <button class="btn btn-danger" style="margin-top: 1em" @onclick="OnCanceled">@CancelText</button>
        <button class="btn btn-primary" style="margin-top: 1em" @onclick="Submit">@SubmitText</button>
    </div>
</EditForm>

@code {
    private DrinkItem drinkItemRecord = new();

    [Parameter]
    public string SubmitText { get; set; } = "Add";

    [Parameter]
    public string CancelText { get; set; } = "Cancel";


    [Parameter]
    public EventCallback<DrinkItem> OnDrinkItemSubmitted { get; set; }

    [Parameter]
    public EventCallback OnCanceled { get; set; }

    private void Submit()
    {
        OnDrinkItemSubmitted.InvokeAsync(drinkItemRecord);
    }
}
